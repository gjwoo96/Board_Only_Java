#예외처리
- 오류 : 컴파일 오류, 런타임 오류 (에러 error , 예외 exception)
- 에러의 경우는 소스코드 내에서 수습이 불가능하며, 예외의 경우는 소스코드 내에서 수습이 가능하다.

//예외처리 구문
try{
    
//Exception는 모든 예외처리의 부모 같은 존재이다
// catch(A_exception | B_exception abE)처럼 한 catch에서 두개의 예외처리를 같이 할수있다.
}catch(Exception e){

}

#예외 발생시키기 (Throw)
try{
    int age = 17;
    if(age < 17){
        throw new Exception ("17 미만입니다.");
    }
}catch(Exception e){
    e.printStachkTrace();
}
-> throw를 통해 예외를 발생시켜 catch부분에서 받게되고 입력시킨 에러가 콘솔창으로 확인 가능하다

# Finally 구문
try {
    
}catch(){

}finally{

}
// 예외가 생기지 않던 생기던 무조건 finally부분을 타게된다.

#암호화

단방향 해시함수의 한계점
sha256으로 동일한 텍스트를 암호화하게된다면 항상 같은 다이제스트를 갖게된다
항상 같은 값을 가지게된다면 그 값들을 모아 리스트를 만들어 내 암호화된 정보를 찾을수 있게되는것이다.
구글에 sha-256 raindow table이라고 검색하면 실제로 그 데이터들을 모아놓은사이트를 찾을수있다.

그렇다면 우리는 어떻게 이러한 한계점을 보완해야할까?
1. 해시함수를 여러번 실행한다.
- 한번만 암호화가아닌 여러번 실행하여 암호화한다
그러나 이건 횟수만 알게되면 보완이 안된다는 단점있다.
2. 솔트
위의 단점을 보완하기위해 해시함수를 돌리기전 원문에 임의의 문자열을 더하는것이다
예를들어 내가 회원가입을할때 1234라는 패스워드를 입력했을때 랜덤한값 "asdnl"+1234를 붙인후 해시함수를 여러번 돌리는것이다. 